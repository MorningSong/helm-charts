{{- $ns := include "vm.namespace" . }}
{{- $ctx := dict "helm" . }}
{{- $urlCtx := dict "helm" . }}
{{- range $i, $z := .Values.availabilityZones }}
  {{- $zone := mergeOverwrite (deepCopy $.Values.zoneTpl) (deepCopy $z) }}
  {{- if $zone.read.vmauth.enabled }}
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAuth
metadata:
  {{- $_ := set $ctx "appKey" (list "zone" "read" "vmauth") }}
  {{- if $zone.vmcluster.enabled }}
    {{- $urlSpec := $zone.vmcluster.spec | default dict }}
    {{- $_ := set $zone.vmcluster "spec" (mergeOverwrite (deepCopy $.Values.common.vmcluster.spec) $urlSpec) }}
  {{- else if $zone.vmsingle.enabled }}
    {{- $urlSpec := $zone.vmsingle.spec | default dict }}
    {{- $_ := set $zone.vmsingle "spec" (mergeOverwrite (deepCopy $.Values.common.vmsingle.spec) $urlSpec) }}
  {{- end }}
  {{- $_ := set $ctx "zone" $zone }}
  {{- $_ := set $urlCtx "zone" $zone }}
  name: {{ include "vm.cr.fullname" $ctx }}
  namespace: {{ $ns }}
  labels: {{ include "vm.labels" $ctx | nindent 4 }}
  {{- with $zone.read.vmauth.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}

  {{- $spec := mergeOverwrite (deepCopy $.Values.common.vmauth.spec) (deepCopy (($zone.common).spec)) (deepCopy ((($zone.read).vmauth).spec)) }}
  {{- $_ := set $urlCtx "style" "managed" }}
  {{- $urls := dict "cluster" (default list) "single" (default list) }}
  {{- if $zone.read.allow }}
    {{- if ($zone.vmcluster).enabled }}
      {{- $_ := set $urlCtx "appKey" (list "zone" "vmcluster" "spec" "vmselect") }}
      {{- $_ := set $urls "cluster" (append $urls.cluster (include "vm.url" $urlCtx)) }}
    {{- else if ($zone.vmsingle).enabled }}
      {{- $_ := set $urlCtx "appKey" (list "zone" "vmsingle" "spec") }}
      {{- $_ := set $urls "single" (append $urls.single (include "vm.url" $urlCtx)) }}
    {{- end }}
  {{- end }}
  {{- range $j, $c := $.Values.availabilityZones }}
    {{- $cross := mergeOverwrite (deepCopy $.Values.zoneTpl) (deepCopy $c) }}
    {{- if and (ne $j $i) $cross.read.allow }}
      {{- if ($cross.vmcluster).enabled }}
        {{- $_ := set $urlCtx "appKey" (list "zone" "vmcluster" "spec" "vmselect") }}
        {{- $_ := set $cross.vmcluster "spec" (mergeOverwrite (deepCopy $.Values.common.vmcluster.spec) (deepCopy ( $cross.vmcluster.spec | default dict))) }}
        {{- $_ := set $urlCtx "zone" $cross }}
        {{- $_ := set $urls "cluster" (append $urls.cluster (include "vm.url" $urlCtx)) }}
      {{- else if ($cross.vmsingle).enabled }}
        {{- $_ := set $urlCtx "appKey" (list "zone" "vmsingle" "spec") }}
        {{- $_ := set $cross.vmsingle "spec" (mergeOverwrite (deepCopy $.Values.common.vmsingle.spec) (deepCopy ( $cross.vmsingle.spec | default dict))) }}
        {{- $_ := set $urlCtx "zone" $cross }}
        {{- $_ := set $urls "single" (append $urls.single (include "vm.url" $urlCtx)) }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- $_ := unset $urlCtx "style" }}
  {{- if and (empty $urls.cluster) (empty $urls.single) }}
    {{- fail (printf "No read backend urls defined for vmauth in AZ %s" $zone.name) -}}
  {{- end }}

  {{- $paths := dict "cluster" (list "/select/.+" "/admin/tenants") "single" (list "/select/.+") }}
  {{- $dropPrefixParts := dict "cluster" 0 "single" 2 }}
  {{- $accessSpec := $spec.unauthorizedUserAccessSpec | default dict }}
  {{- $urlMap := $accessSpec.url_map | default (list (default dict)) }}
  {{- $firstItem := index $urlMap 0 }}
  {{- $urlMap = slice $urlMap 1 }}
  {{- range $kind, $backends := $urls }}
    {{- if $backends }}
      {{- $item := dict "src_paths" (get $paths $kind) "url_prefix" $backends "drop_src_path_prefix_parts" (get $dropPrefixParts $kind) }}
      {{- $item = mergeOverwrite (deepCopy $item) (deepCopy $firstItem) }}
      {{- $urlMap = prepend $urlMap $item }}
    {{- end }}
  {{- end }}
  {{- $_ := set $accessSpec "url_map" $urlMap }}
  {{- $_ := set $spec "unauthorizedUserAccessSpec" $accessSpec }}
  {{- if not $spec.nodeSelector }}
    {{- $_ := set $spec "nodeSelector" (dict "topology.kubernetes.io/zone" "{{ (.zone).name }}") }}
  {{- end }}
spec: {{ tpl (toYaml $spec) $ctx | nindent 2 }}
  {{- end }}
{{- end }}
