{{- $ctx := dict "helm" . }}
{{- $zoneTpl := .Values.zoneTpl }}
{{- $common := .Values.common | default dict }}
{{- $urlCtx := dict "helm" . }}
{{- $fullname := include "vm.fullname" . }}
{{- if ((((.Values).read).global).vmauth).enabled }}
  {{- $commonAuth := dict "spec" (($common.vmauth).spec | default dict) }}
  {{- $auth := .Values.read.global.vmauth | default dict }}
  {{- $auth = mergeOverwrite (deepCopy $commonAuth) (deepCopy $auth) }}
  {{- $_ := set $ctx "appKey" (list "vmauth" "spec") }}
  {{- $_ := set $ctx "fullname" $fullname }}
  {{- $_ := set $ctx "vmauth" $auth }}
---
apiVersion: operator.victoriametrics.com/v1beta1
kind: VMAuth
metadata:
  name: {{ include "vm.cr.fullname" $ctx }}
  namespace: {{ include "vm.namespace" $ctx }}
  labels: {{ include "vm.labels" $ctx | nindent 4 }}
  {{- with .Values.read.global.vmauth.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end  }}

  {{- $_ := set $urlCtx "style" "managed" }}
  {{- $urls := dict "cluster" (default list) "single" (default list) }}
  {{- range $i, $z := .Values.availabilityZones }}
    {{- $zone := mergeOverwrite (deepCopy $zoneTpl) $z }}
    {{- if $zone.read.vmauth.enabled -}}
      {{- $urlSpec := (($zone.read).vmauth).spec | default dict }}
      {{- $_ := set $zone.read.vmauth "spec" (mergeOverwrite (deepCopy $commonAuth.spec) $urlSpec) }}
      {{- $_ := set $urlCtx "zone" $zone }}
      {{- $_ := set $urlCtx "appKey" (list "zone" "read" "vmauth" "spec") }}
      {{- $_ = set $urls "cluster" (append $urls.cluster (include "vm.url" $urlCtx)) }}
    {{- else if $zone.vmcluster.enabled -}}
      {{- $urlSpec := mergeOverwrite (deepCopy ((($common.vmcluster).spec | default dict))) (deepCopy ($zone.vmcluster).spec | default dict) }}
      {{- $_ := set $zone.vmcluster "spec" $urlSpec }}
      {{- $_ := set $urlCtx "zone" $zone }}
      {{- $_ := set $urlCtx "appKey" (list "zone" "vmcluster" "spec" "vmselect") }}
      {{- $_ := set $urls "cluster" (append $urls.cluster (include "vm.url" $urlCtx)) }}
    {{- else if $zone.vmsingle.enabled -}}
      {{- $urlSpec := mergeOverwrite (deepCopy ((($common.vmsingle).spec | default dict))) (deepCopy ($zone.vmsingle).spec | default dict) }}
      {{- $_ := set $zone.vmsingle "spec" $urlSpec }}
      {{- $_ := set $urlCtx "zone" $zone }}
      {{- $_ := set $urlCtx "appKey" (list "zone" "vmsingle" "spec") }}
      {{- $_ := set $urls "single" (append $urls.single (include "vm.url" $urlCtx)) }}
    {{- end -}}
  {{- end }}
  {{- $_ := unset $urlCtx "style" }}
  {{- if and (empty $urls.cluster) (empty $urls.single) }}
    {{- fail "No global vmauth read backend urls defined" -}}
  {{- end }}
  {{- $paths := dict "cluster" (list "/select/.+" "/admin/tenants") "single" (list "/select/.+") }}
  {{- $dropPrefixParts := dict "cluster" 0 "single" 2 }}
  {{- $spec := deepCopy $auth.spec | default dict -}}
  {{- $accessSpec := $spec.unauthorizedUserAccessSpec | default dict }}
  {{- $urlMap := $accessSpec.url_map | default (list (default dict)) }}
  {{- $firstItem := index $urlMap 0 }}
  {{- $urlMap = slice $urlMap 1 }}
  {{- range $kind, $backends := $urls }}
    {{- if $backends }}
      {{- $item := dict "src_paths" (get $paths $kind) "url_prefix" $backends "drop_src_path_prefix_parts" (get $dropPrefixParts $kind) }}
      {{- $item = mergeOverwrite (deepCopy $item) (deepCopy $firstItem) }}
      {{- $urlMap = prepend $urlMap $item }}
    {{- end }}
  {{- end }}
  {{- $_ := set $accessSpec "url_map" $urlMap }}
  {{- $_ := set $spec "unauthorizedUserAccessSpec" $accessSpec }}
spec: {{ tpl (toYaml $spec) $ctx | nindent 2 }}
{{- end }}

